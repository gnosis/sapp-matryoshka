{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["REFUNDER_ADDRESS","WETH_ADDRESS","MIN_FUNDS","ethers","utils","parseEther","Erc20","Erc20Interface","Interface","getNextTxsFromService","safe","network","a","safeInfoUrl","axios","get","infoResp","safeTxsUrl","data","nonce","txsResp","threshold","txs","results","encodeSafeTransaction","safeTx","console","log","confirmations","encodedCall","encodeFunctionData","to","value","operation","safeTxGas","baseGas","gasPrice","gasToken","refundReceiver","sort","left","right","owner","toLowerCase","localeCompare","reduce","acc","val","signature","slice","methodData","method","App","useSafeAppsSDK","sdk","connected","connectedSafe","useCallback","getSafeInfo","useState","connectedAddress","setConnectedAddress","capacity","BigNumber","from","level","gasTankState","setGasTankState","wethAmount","setWethAmount","lastExecutedNonce","setLastExecutedNonce","confirmationsRequired","setConfirmationsRequied","gasAllowance","setGasAllowance","provider","useMemo","SafeAppsSdkProvider","weth","Contract","setTxs","loadTxs","safeAddress","Error","error","loadGasTankState","allowance","balanceOf","loadInfo","useEffect","wrapEth","amount","parsedAmount","send","toString","updateGasAllowance","parsedAllowance","relayTx","tx","executeData","post","availableGasFunds","lte","className","size","color","onClick","formatEther","label","onChange","e","target","map","safeTxHash","disabled","length","lt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","theme","document","getElementById"],"mappings":"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","file":"static/js/main.2dcef65f.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { BigNumber, ethers } from 'ethers';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { SafeAppsSdkProvider } from '@gnosis.pm/safe-apps-ethers-provider';\nimport './App.css';\nimport {\n  Button,\n  TextField\n} from '@gnosis.pm/safe-react-components';\nimport axios from 'axios';\n\nconst REFUNDER_ADDRESS = \"0x2d8cE02dd1644A9238e08430CaeA15a609503140\";\nconst WETH_ADDRESS = \"0xc778417E063141139Fce010982780140Aa0cD5Ab\";\nconst MIN_FUNDS = ethers.utils.parseEther(\"0.001\")\n\nconst Erc20 = [\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n  \"function balanceOf(address _owner) public view returns (uint256 balance)\",\n  \"event Approval(address indexed _owner, address indexed _spender, uint256 _value)\"\n];\n\nconst Erc20Interface = new ethers.utils.Interface(Erc20)\n\ninterface Page<T> {\n  results: T[]\n}\n\ninterface SafeInfo {\n  nonce: number,\n  threshold: number\n}\n\ninterface SafeConfirmation {\n    owner: string,\n    signature: string\n}\n\ninterface SafeTransaction {\n    safeTxHash: string,\n    to: string,\n    value: string,\n    data: string,\n    operation: number,\n    gasToken: string,\n    safeTxGas: number,\n    baseGas: number,\n    gasPrice: string,\n    refundReceiver: string,\n    nonce: number,\n    confirmationsRequired: number,\n    confirmations: SafeConfirmation[]\n}\n\ninterface GasTank {\n  capacity: BigNumber,\n  level: BigNumber\n}\n\nconst getNextTxsFromService = async (safe: string, network: string): Promise<{ threshold: number, txs: SafeTransaction[] } > => {\n  const safeInfoUrl = `https://safe-transaction.${network}.gnosis.io/api/v1/safes/${safe}/`\n  const infoResp = await axios.get<SafeInfo>(safeInfoUrl)\n  const safeTxsUrl = `https://safe-transaction.${network}.gnosis.io/api/v1/safes/${safe}/multisig-transactions/?nonce=${infoResp.data.nonce}`\n  const txsResp = await axios.get<Page<SafeTransaction>>(safeTxsUrl)\n  return {\n    threshold: infoResp.data.threshold,\n    txs: txsResp.data.results\n  }\n}\n\nconst buildSignaturesBytes = (confirmations: SafeConfirmation[]): string => {\n    return confirmations.sort((left, right) => left.owner.toLowerCase().localeCompare(right.owner.toLowerCase()))\n        .reduce((acc, val) => acc + val.signature.slice(2), \"0x\")\n}\n\nconst encodeSafeTransaction = (safe: string, safeTx: SafeTransaction): { to: string, method: string, methodData: string } => {\n    console.log({\n        safeTx\n    })\n    const safeInterface = new ethers.utils.Interface(['function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures)'])\n    const encodedCall = safeInterface.encodeFunctionData('execTransaction', [safeTx.to, safeTx.value, safeTx.data || \"0x\", safeTx.operation, safeTx.safeTxGas, safeTx.baseGas, safeTx.gasPrice, safeTx.gasToken, safeTx.refundReceiver, buildSignaturesBytes(safeTx.confirmations)])\n    const methodData = \"0x\" + encodedCall.slice(10)\n    return {\n        to: safe,\n        method: encodedCall.slice(0, 10),\n        methodData\n    }\n}\n\nconst App: React.FC = () => {\n  const { sdk, connected, safe } = useSafeAppsSDK();\n\n  const connectedSafe = useCallback(async () => {\n    return (await sdk.getSafeInfo())\n  }, [sdk])\n\n  const [connectedAddress, setConnectedAddress] = useState(\"\")\n  const [gasTankState, setGasTankState] = useState<GasTank>({ capacity: BigNumber.from(0), level: BigNumber.from(0) })\n  const [wethAmount, setWethAmount] = useState(\"\")\n  const [lastExecutedNonce, setLastExecutedNonce] = useState(-1)\n  const [confirmationsRequired, setConfirmationsRequied] = useState(1000000000)\n  const [gasAllowance, setGasAllowance] = useState(\"\")\n\n  const provider = useMemo(() => new SafeAppsSdkProvider(safe, sdk), [safe, sdk])\n  const weth = useMemo(() => new ethers.Contract(WETH_ADDRESS, Erc20, provider), [provider])\n\n  const [txs, setTxs] = useState<SafeTransaction[]>([])\n  const loadTxs = useCallback(async () => {\n    try {\n      const safe = await connectedSafe()\n      setConnectedAddress(safe.safeAddress)\n      const network = safe.network.toLowerCase()\n      if (network !== \"rinkeby\") throw Error(`Unsupported network ${network}`)\n      const { threshold, txs} = await getNextTxsFromService(safe.safeAddress, network)\n      setTxs(txs)\n      setConfirmationsRequied(threshold)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [connectedSafe, provider, setTxs, setConfirmationsRequied, setConnectedAddress])\n\n  const loadGasTankState = useCallback(async () => {\n    try {\n      const safe = await connectedSafe()\n      const capacity = await weth.allowance(safe.safeAddress, REFUNDER_ADDRESS)\n      const level = await weth.balanceOf(safe.safeAddress)\n      setGasTankState({ capacity, level })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [connectedSafe, provider, weth, setTxs, setConnectedAddress])\n\n  const loadInfo = useCallback(() => {\n    loadTxs()\n    loadGasTankState()\n  }, [loadTxs, loadGasTankState])\n\n  useEffect(() => {\n    loadInfo()\n  }, [loadInfo])\n\n  const wrapEth = useCallback(async(amount: string) => {\n    try {\n      const parsedAmount = ethers.utils.parseEther(amount)\n      await sdk.txs.send({\n        txs: [{\n          to: WETH_ADDRESS,\n          value: parsedAmount.toString(),\n          data: '0x'\n        }]\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n\n  const updateGasAllowance = useCallback(async(allowance: string) => {\n    try {\n      const parsedAllowance = ethers.utils.parseEther(allowance)\n      await sdk.txs.send({\n        txs: [{\n          to: WETH_ADDRESS,\n          value: '0',\n          data: Erc20Interface.encodeFunctionData(\"approve\", [REFUNDER_ADDRESS, parsedAllowance])\n        }]\n      })\n    } catch (e) {\n      console.error(e)\n    }\n  }, [sdk])\n\n  const relayTx = useCallback(async(tx: SafeTransaction) => {\n    try {\n      setLastExecutedNonce(tx.nonce)\n      const safe = await connectedSafe()\n      const executeData = encodeSafeTransaction(safe.safeAddress, tx)\n      const executeUrl = `https://yacate-relay-rinkeby.herokuapp.com/v1/transactions/execute/generic`\n      const txsResp = await axios.post<String>(executeUrl, executeData)\n      console.log(txsResp)\n    } catch (e) {\n      setLastExecutedNonce(tx.nonce - 1)\n      console.error(e)\n    }\n  }, [connectedSafe])\n\n  const availableGasFunds = gasTankState.level.lte(gasTankState.capacity) ? gasTankState.level : gasTankState.capacity\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Next txs for {connectedAddress} <Button size=\"md\" color=\"primary\" onClick={loadInfo}>Reload</Button><br /><br />\n          You pay your transaction fees with WETH from your Safe. For that you need to set an allowance for {REFUNDER_ADDRESS} for WETH ({WETH_ADDRESS}). At least 0.001 WETH for gas fees need to be available to use this Safe App!<br /><br />\n          Max gas fees available: {ethers.utils.formatEther(availableGasFunds)} WETH<br /><br />\n          <TextField label=\"Amount to wrap\" value={wethAmount} onChange={(e) => setWethAmount(e.target.value)}/><br />\n          {ethers.utils.formatEther(gasTankState.level)} WETH <Button size=\"md\" color=\"primary\" onClick={() => wrapEth(wethAmount)}>Wrap Eth</Button><br />\n          <TextField label=\"Max funds to allow for paying gas\" value={gasAllowance} onChange={(e) => setGasAllowance(e.target.value) } /><br />\n          {ethers.utils.formatEther(gasTankState.capacity)} WETH <Button size=\"md\" color=\"primary\" onClick={() => updateGasAllowance(gasAllowance)}>Set Gas Allowance</Button><br />\n        </p>\n        {txs.map(tx => <div>\n          Safe Tx Hash: {tx.safeTxHash}<br />\n          To: {tx.to}<br />\n          Nonce: {tx.nonce}<br />\n          <Button size=\"md\" color=\"primary\" onClick={() => relayTx(tx)} disabled={confirmationsRequired > tx.confirmations.length || tx.nonce <= lastExecutedNonce || availableGasFunds.lt(MIN_FUNDS)}>Relay</Button>\n          <hr />\n        </div>)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from '@gnosis.pm/safe-react-components';\nimport SafeProvider from '@gnosis.pm/safe-apps-react-sdk';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n    <SafeProvider>\n      <App />\n    </SafeProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}